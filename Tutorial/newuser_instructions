#*################################################################
#                                                                #
# Copyright (C) 2014-2024, Institute for Defense Analyses        #
# 4850 Mark Center Drive, Alexandria, VA; 703-845-2500           #
# This material may be reproduced by or for the US Government    #
# pursuant to the copyright license under the clauses at DFARS   #
# 252.227-7013 and 252.227-7014.                                 #
#                                                                #
# LARC : Linear Algebra via Recursive Compression                #
# Authors:                                                       #
#   - Steve Cuccaro (IDA-CCS)                                    #
#   - John Daly (LPS)                                            #
#   - John Gilbert (UCSB, IDA adjunct)                           #
#   - Mark Pleszkoch (IDA-CCS)                                   #
#   - Jenny Zito (IDA-CCS)                                       #
#                                                                #
# Additional contributors are listed in "LARCcontributors".      #
#                                                                #
# Questions: larc@super.org                                      #
#                                                                #
# All rights reserved.                                           #
#                                                                #
# Redistribution and use in source and binary forms, with or     #
# without modification, are permitted provided that the          #
# following conditions are met:                                  #
#   - Redistribution of source code must retain the above        #
#     copyright notice, this list of conditions and the          #
#     following disclaimer.                                      #
#   - Redistribution in binary form must reproduce the above     #
#     copyright notice, this list of conditions and the          #
#     following disclaimer in the documentation and/or other     #
#     materials provided with the distribution.                  #
#   - Neither the name of the copyright holder nor the names of  #
#     its contributors may be used to endorse or promote         #
#     products derived from this software without specific prior #
#     written permission.                                        #
#                                                                #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND         #
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,    #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF       #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE       #
# DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER NOR        #
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   #
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT   #
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;   #
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)       #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      #
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR   #
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, #
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             #
#                                                                #
#*################################################################

Advice on Getting Started to New User
=====================================

Read the README.md file in MyPyLARC and follow instructions to install
and compile MyPyLARC.

Once MyPyLARC is compiled you will have access the the Tutorial
examples and may also reference the doxygen documentation (see
MyPyLARC/README.md for directions).  And of course you can read the
paper, slide deck, and poster in the two doc directories MyPyLARC/doc
and MyPyLARC/larc/doc.

Tutorial
--------
To execute a tutorial script such as tut1_larc_overview.py type
    python3 tut1_larc_overview.py
and follow the menu instructions.
We suggest you might do the tutorials starting with the first
few on this list.
   * tut1_larc_overview.py
   * tut2_reporting.py
   * fft_nonParamFile_init.py
   * fft_paramFile_init.py
   * tut4_matrix_build_and_io.py

Or if you like to use jupyter notebook type:
   jupyter notebook sample_larc_initialization_and_use.ipynb
which should launch jupyter notebook in your browser with
this routine loaded.

Some of the tutorials will require that you recompile using a
particular type.  So for example, if you try to run the
examples_roots_unity.py and you have compiled with the default type
(REAL) you will be asked to recompile with the COMPLEX scalarType,
which you might do as follows.
  * Go back to the top MyPyLARC directory
     cd ..
  * Compile with COMPLEX scalarType
     make TYPE=COMPLEX
  * Come back to the Tutorial directory and run the roots program
     cd Tutorial
     python3 examples_roots_unity.py
See the README.md for a list of all the scalarTypes.     

Some of the tutorials will require commandline arguments, but should
tell you what is needed if you try the command without arguments.
For example, if you type
   python3 preloading_mults_pi.py
It will fuss at you and suggest trying some arguments such as
   python3 preloading_mults_pi.py 5 6


Making Your Own Routines
========================
If you are starting your own project with python routines
look at the advice in the file:
      Tutorial/create_a_project.txt
		  
