#*################################################################
#                                                                #
# Copyright (C) 2014-2024, Institute for Defense Analyses        #
# 4850 Mark Center Drive, Alexandria, VA; 703-845-2500           #
# This material may be reproduced by or for the US Government    #
# pursuant to the copyright license under the clauses at DFARS   #
# 252.227-7013 and 252.227-7014.                                 #
#                                                                #
# LARC : Linear Algebra via Recursive Compression                #
# Authors:                                                       #
#   - Steve Cuccaro (IDA-CCS)                                    #
#   - John Daly (LPS)                                            #
#   - John Gilbert (UCSB, IDA adjunct)                           #
#   - Mark Pleszkoch (IDA-CCS)                                   #
#   - Jenny Zito (IDA-CCS)                                       #
#                                                                #
# Additional contributors are listed in "LARCcontributors".      #
#                                                                #
# Questions: larc@super.org                                      #
#                                                                #
# All rights reserved.                                           #
#                                                                #
# Redistribution and use in source and binary forms, with or     #
# without modification, are permitted provided that the          #
# following conditions are met:                                  #
#   - Redistribution of source code must retain the above        #
#     copyright notice, this list of conditions and the          #
#     following disclaimer.                                      #
#   - Redistribution in binary form must reproduce the above     #
#     copyright notice, this list of conditions and the          #
#     following disclaimer in the documentation and/or other     #
#     materials provided with the distribution.                  #
#   - Neither the name of the copyright holder nor the names of  #
#     its contributors may be used to endorse or promote         #
#     products derived from this software without specific prior #
#     written permission.                                        #
#                                                                #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND         #
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,    #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF       #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE       #
# DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER NOR        #
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   #
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT   #
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;   #
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)       #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      #
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR   #
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, #
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             #
#                                                                #
#*################################################################

Here are a few tips that may help a new user create their own project.

TIP 1: 
   The easiest way to create your own project subdirectory is
   to make a copy of an existing project subdirectory and then
   modify it for your purposes.  For example, if you would like
   a project that reads in MatrixMarketExchange formated sparse
   matrices and does some LARC math, then outputs a result,
   then you might like to copy the Counts_Triangle project:
   From the top MyPyLARC directory:
      cp -r Count_Triangles MyNewProject

   Notice that we have made the project MyNewProject at the same
   level as Count_Triangles so that any relative paths still work.

   If your project used complex numbers you might instead
   decide to use FFT_play as a template for your project:
   From the top MyPyLARC directory:
      cp -r FFT_play MyNewProject
   Then don't forget to compile MyPyLARC with a complex type, e.g.:
      cd MyPyLARC
      make  TYPE=COMPLEX

TIP 2:
   Once you have created your directory, check to see if the code
   that you copied still runs in the new location. It is possible
   that paths that were not in the git repository need to be
   created (the code should complain about the missing subdirectories
   if there are any, e.g. a Data/Out subdirectory).

TIP 3:
   Make incremental changes in the code, checking often to
   see if everything still works.

   A list of all the matrix operations in LARC can be found
   in MyPyLARC/README.md or in the doxygen documentation which is
   linked from the doxygen mainpage to the content of matmath.h.

   There are many examples in the Tutorial directory, that might
   also be used.
   


