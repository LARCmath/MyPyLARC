#!/usr/bin/env python3

 #*##############################################################*#
 #                                                                #
 # Copyright (C) 2014-2024, Institute for Defense Analyses        #
 # 4850 Mark Center Drive, Alexandria, VA; 703-845-2500           #
 # This material may be reproduced by or for the US Government    #
 # pursuant to the copyright license under the clauses at DFARS   #
 # 252.227-7013 and 252.227-7014.                                 #
 #                                                                #
 # LARC : Linear Algebra via Recursive Compression                #
 # Authors:                                                       #
 #   - Steve Cuccaro (IDA-CCS)                                    #
 #   - John Daly (LPS)                                            #
 #   - John Gilbert (UCSB, IDA adjunct)                           #
 #   - Mark Pleszkoch (IDA-CCS)                                   #
 #   - Jenny Zito (IDA-CCS)                                       #
 #                                                                #
 # Additional contributors are listed in "LARCcontributors".      #
 #                                                                #
 # Questions: larc@super.org                                      #
 #                                                                #
 # All rights reserved.                                           #
 #                                                                #
 # Redistribution and use in source and binary forms, with or     #
 # without modification, are permitted provided that the          #
 # following conditions are met:                                  #
 #   - Redistribution of source code must retain the above        #
 #     copyright notice, this list of conditions and the          #
 #     following disclaimer.                                      #
 #   - Redistribution in binary form must reproduce the above     #
 #     copyright notice, this list of conditions and the          #
 #     following disclaimer in the documentation and/or other     #
 #     materials provided with the distribution.                  #
 #   - Neither the name of the copyright holder nor the names of  #
 #     its contributors may be used to endorse or promote         #
 #     products derived from this software without specific prior #
 #     written permission.                                        #
 #                                                                #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND         #
 # CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,    #
 # INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF       #
 # MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE       #
 # DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER NOR        #
 # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   #
 # SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT   #
 # NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;   #
 # LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)       #
 # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      #
 # CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR   #
 # OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, #
 # EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.             #
 #                                                                #
 #*##############################################################*#

from __future__ import print_function
import os
import glob
import sys
sys.path.append(os.path.join(os.path.dirname(__file__),"../../src"))
import MyPyLARC as mypy
from ctypes import *
import json    # for loading parameter files
import numpy as np
import re


## \file power_ham.py
#
#  \brief Uses the power method on an input matrix H' generated by either hamilton_harm.py or hamilton_morse.py.
#
# This program uses the power method on an input matrix generated by
# either hamilton_harm.py or hamilton_morse.py. The input matrix is in
# LARCmatrix compressed format, and is not the Hamiltonian of the problem
# to be solved but rather that Hamiltonian subtracted from the identity
# matrix times some constant A; this is done in order to make the power method
# for finding the largest eigenvalue of the provided matrix give the smallest
# eigenvalue for the real problem. The constant A and the position of the 
# extreme value for the potential are stored as metadata in the LARCmatrix file
# and are also read by the program, The  eigenvector found by this routine is
# written to output_filename.

if __name__ == '__main__':


    #*#################################################################*#
    # Set the level (matrices are 2**level by 2**level                  #
    # and the verbosity (0=SILENT, 1=BASIC, 2=CHATTY, 3=DEBUG, 4=ALL)   #
    #*#################################################################*#

    if 6 == len(sys.argv):
        level = int(sys.argv[1]) 
        verbose = int(sys.argv[2])
        LARC_verbose = int(sys.argv[3])
        input_filename = sys.argv[4]
        output_filename = sys.argv[5]

    else:
        print("\nThis program requires five commandline integer inputs:")
        print("   level:  matrices will be 2**level by 2**level")
        print("   verbose:  the verbosity level for this program")
        print("   LARC_verbose:  the verbosity level for the LARC package")
        print("   input_filename: an inverted Hamiltonian matrix, stored")
        print("       in LARCMatrix (json) format")
        print("   output_filename: the eigenvector found by this routine")
        print("       (list of 2**level values)")
        print("\nSample Usage:")
        print("  python power_ham.py 3 2 0 invertHarmonic.json eigenvector")
        print("    level=3  means we will use 8x8 matrices,")
        print("    verbose=2  prints CHATTY comments in this python routine,")
        print("    LARC_verbose=0  prints only any errors from LARC package")
        sys.exit()


    dim = 2**level
    if (verbose > 1):
       print("\nlevel=%d: Program will use %d by %d matrices." %(level,dim,dim))
    if ((verbose == 2) or (verbose == 4)):
        print("Verbosity:")
        print("\tThe local verbosity level is verbose=%d and the" %verbose)
        print("\tverbosity level for the LARC package is %d," %LARC_verbose)
        print("\twhere 0=SILENT, 1=BASIC, 2=CHATTY, 3=DEBUG, 4=ALL.")


    #*##################################################*#
    #*  General Description of What this Program Does   *# 
    #*##################################################*#
    # input("\nHit return to continue")
    if (verbose > 1):
        print("\nThis code implements the power method for finding the largest")
        print("magnitude eigenvalue of the starting matrix E")
        
    #*##################################################################*#
    # Figure out the scalarType                                          #
    # In the Makefile you can compile with different scalarType values   #
    # Define string for using in formating filenames                     #
    #*##################################################################*#
    scalarTypeStr = mypy.cvar.scalarTypeStr

    #*##################################################*#
    #*   Find out if machine has a large amount of      *#
    #*   memory available so we can make bigger tables  *#
    #*##################################################*#
    memory_available = mypy.memory_available_GiB()
    if (verbose > 0):
        print("\nThe memory available is %ld GiB" %memory_available)
        print("We will use this to select which computing_env to read from parameter file.")
        print("You could write code to select computing_env automatically.")

    if (memory_available > 200):
        if (verbose > 0):
            print("\nThis memory is more than 200 GiB\n")
        computing_env = 'large'
    else:    
        if (memory_available > 50):
            if (verbose > 0):
                print("\nThis memory is between 50 and 200 GiB\n")
            computing_env = 'medium'
        else:
            if (verbose > 0):
                print("\nThis memory is less than 50 GiB\n")
            computing_env = 'small'
            
    if (verbose > 0):
        print("This program believes the computing_environment is %s" %computing_env)

    # userInput= input("Press <Enter> to continue\n")
    

    #*###################################*#
    #*    Print baseline usage report    *#
    #*###################################*#
    if (verbose > 0):
        print("")
        print("In the following baseline usage report")
        print("RSS, resident set size, refers to size of the process held in RAM.")
        print("HASHSTATS: hash occupancy means, variances and crash resolution chain lengths")
        mypy.memory_and_time_report(0, "stdout")

    # computing_env = "debug"    
    # computing_env = "desktop"    
    # computing_env = "server"    
    # computing_env = "small"    
    # computing_env = "medium"    
    # computing_env = "large"    
    
    # read the parameter file into a python dictionary
    with open('../../InitParams/power_method.init_params','r') as init_file:
        init_param = json.load(init_file)
        for p in init_param[computing_env]:
            if (verbose > 1):
                print('MatrixExponent: %d' %(p['matrix_exponent']))
                print('OpExponent: %d' %(p['op_exponent']))
                print('MaxLevel: %d' %(p['max_level']))
                print('RegionBitParam: %d' %(p['regionbitparam']))
                print('ZeroRegionBitParam: %d' %(p['zeroregionbitparam']))
                print('ReportIntervalSecs: %d' %(p['report_interval_seconds']))
                print('MinMemRequiredGiB: %d' %(p['min_memGiB_required']))
                print('Verbose: %d' %(p['verbose']))
                print('')
            matrix_exponent = p['matrix_exponent']
            op_exponent = p['op_exponent']
            max_level= p['max_level']
            regionbitparam = p['regionbitparam']
            zeroregionbitparam = p['zeroregionbitparam']
            report_interval_seconds = p['report_interval_seconds']
            min_memGiB_required = p['min_memGiB_required']
            p_verbose = p['verbose']

    # warn if the commandline value for LARC_verbose differs from the parameter file value for p_verbose        
    if (LARC_verbose > 0):
        if (LARC_verbose != p_verbose):
            print("NOTE: This program uses commandline (LARC_verbose = %d) " %LARC_verbose)
            print("      rather than the parameter file (p_verbose = %d)." %p_verbose)
            print("      The verbose key is:  0=SILENT, 1=BASIC, 2=CHATTY, 3=DEBUG.")

    if (level > max_level):
       print("ERROR: max_level for machine is %d, but input level is %d" %(max_level, level))
       print("consider moving to a machine with more memory")
       sys.exit(0)

    # initialize LARC
    mypy.initialize_larc(matrix_exponent,op_exponent,max_level,regionbitparam,zeroregionbitparam,LARC_verbose)

    if scalarTypeStr in ('Integer', 'MPInteger'):
        print("\nThis routine does not work with integer types!")
        sys.exit(1)
    if scalarTypeStr in ('MPRational','MPRatComplex'):
        print("\nThis routine does not give good results with rational scalarTypes")
        print("Consider using either MPReal or MPComplex instead")
        input("\nHit return to continue, or ^C to quit")

    # if verbosity higher than WARN start a reporting thread              
    if (verbose > 1):              
        mypy.create_report_thread(report_interval_seconds)

    #*#####################################*#
    #* read in inverted Hamiltonian matrix *#
    #*#####################################*#

    invHamID = mypy.read_larcMatrixFile(input_filename)
    adjustEigStr = mypy.info_get(mypy.OTHERMATRIX,invHamID)
    print("the adjustment value is %s" %adjustEigStr)
    adjustEigID = mypy.get_valID_from_valString(adjustEigStr)
    startposStr = mypy.info_get(mypy.COMMENT,invHamID)
    print(startposStr)
    startposList = startposStr.split(" ")
    startpos = int(startposList[0])

    #*########################################################*#
    #* if matrices are too large do not allow naive printing  *#            
    #*########################################################*#
    if (level < 4):
        print_naive = 1
    else:
        print_naive = 0
    if (verbose > 1):             
        if print_naive:
            print("  The level is small enough that we can print files of naive matrices to the screen.")
        else: 
            print("  The level= %d, is too big to reasonable print naive-formatted matrices to the screen." %level)

    print("\n We have loaded the matrix into LARC and it has matrixID %d\n"
             %invHamID)
    print("\n")

    # We will make a simple vector to start
    # use the input from the infoStore to choose a good unit vector
    v = [0 for i in range (0,dim)]
    v[startpos] = 1
    #print("\n We have created the vector v")
    #print(v)
        
    #a_arr = list(map(str,a_str))
    v_str_list = mypy.map_to_str(v,scalarTypeStr)
    #print("\n We tried to turn v into a list of strings")
    #print(v_str_list)

    # creating or finding the matrix associated with the array
    v_ID = mypy.row_major_list_to_store(v_str_list, level, 0, 1)
    # mypy.print_naive(v_ID)
    print("\n We have loaded the column vector v into LARC and it has matrixID %d\n"%v_ID)
    print("\n")

    v_old_ID = -1
    v_new_ID = v_ID
    # the maximum element in the unit vector is "1", which is pre-stored
    one_ID = mypy.get_identity_pID(0)
    maxEl_ID = one_ID
    counter = 0


    # TODO: Add query for which norm you want to use
    maxnorm = 1  # 1 means use the maxnorm, versus L2 norm
    if (maxnorm):
        chosen_norm = mypy.L_infty
    else:
        chosen_norm = mypy.l_2
           
    # eight_ID = mypy.get_valID_from_valString("8.0")

    # retrieve the next matrix ID to be assigned in LARC v_first_ID
    v_first_ID = mypy.num_matrices_created()
    # make exit condition that v_first_ID < v_new_ID < v_old_ID

    # MARK claims: v_norm decreasing is also a stopping condition

    loop_hash_table = set()
    

    print("\nStarting power method loop!")
    #while (v_old_ID != v_new_ID): # (v_old_ID = v_new_ID) converged  
    while (1):
        v_old_ID = v_new_ID
        old_maxEl_ID = maxEl_ID
        v_unnorm_ID = mypy.matrix_mult(invHamID,v_old_ID)
        maxEl_ID = mypy.matrix_element_with_maxNorm(v_unnorm_ID)
        # eventually, the eigenvalue will be given by the ratio
        # of the new maximum ID element and the old maximum ID element
        eval_ID = mypy.scalar_divide(maxEl_ID,old_maxEl_ID)
        if (maxnorm):
            # dividing by the element with maximal norm makes the
            # value of this element in the vector equal to 1.0
            # (+ 0.0i if complex); it remains maximal
            v_new_ID = mypy.scalar_divide(v_unnorm_ID, maxEl_ID)
            # when using l\infty norm, the vector is now normalized
            maxEl_ID = one_ID
        else:
            # dividing by the element with maximal norm makes the
            # value of this element in the vector equal to 1.0
            # (+ 0.0i if complex); it remains maximal
            v_temp_ID = mypy.scalar_divide(v_unnorm_ID, maxEl_ID)
            # when using l2 norm, we still need to normalize
            norm_ID = mypy.normID(v_temp_ID,mypy.L_2)
            v_new_ID = mypy.scalar_divide(v_temp_ID,norm_ID)
            maxEl_ID = mypy.scalar_divide(one_ID,norm_ID)
            
        # print("The normalized vector has ID %d\n" %normalizedID1)
        # mypy.print_naive(normalizedID1)
        if (v_new_ID == v_old_ID):
            evalue_str = mypy.get_scalar_value_string(eval_ID)
            print("Exiting: new and old eigenvectors are the same!")
            break
        if (v_new_ID < v_old_ID):
            if (v_new_ID in loop_hash_table):
                evalue_str = mypy.get_scalar_value_string(eval_ID)
                print("Exiting: detected loop convergence.")
                break
            else:
                print("\n\tnew is %d, old is %d" %(v_new_ID,v_old_ID))
                print("\tadding ID %d to hash table" %v_new_ID)
                loop_hash_table.add(v_new_ID)
        counter += 1
        if (counter%1000 == 0):
            evalue_str = mypy.get_scalar_value_string(eval_ID)
            #print("The counter is %d" %counter)
            print("The counter is %d, evalue_str %s"
                %(counter, evalue_str))
            # print("The IDs for v_old is %d and it is" %v_old_ID)
            # mypy.print_naive(v_old_ID)
            # print("The ID for v_new is %d and it is" %v_new_ID)
            # mypy.print_naive(v_new_ID)
            print("The ID for v_new is %d" %v_new_ID)

    print("After loop the counter is %d, the eigenvalue is %s"
          %(counter,evalue_str))
    print("and the eigenvector is")
    mypy.print_naive(v_new_ID)

    # evString = "eigenvector_L" + str(level)
    mypy.fprint_naive(v_new_ID,output_filename)

    v_diff_ID = mypy.matrix_diff(v_new_ID,v_old_ID)
#    v_diff_norm_str = chosen_norm(v_diff_ID)
    v_diff_norm_ID = mypy.normID(v_diff_ID,chosen_norm)
    v_diff_norm_str = mypy.traceID(v_diff_norm_ID)
    print("The difference v_new and v_old has norm %s and the diff vector is " %v_diff_norm_str)
    mypy.print_naive(v_diff_ID)
    
# subtract the eigenvalue from adjustEig to get the correct eigenvalue
    correctEigID = mypy.matrix_diff(adjustEigID,eval_ID)
    print("the adjusted eigenvalue is ",
	 mypy.get_scalar_value_string(correctEigID))
